#! /usr/bin/env bash
# shellcheck disable=SC2034,SC2317

################################################################################

# Name of registry, repository and name of official image
IMAGE_BASE="ghcr.io/essentialkaos/perfecto"

# Name of perfecto image on GitHub Container Registry with OL 8 based image
IMAGE_CENTOS="$IMAGE_BASE:ol8"

# Name of perfecto image on GitHub Container Registry with Alpine based image
IMAGE_MICRO="$IMAGE_BASE:micro"

################################################################################

engine=""

################################################################################

# Main function
#
# Code: No
# Echo: No
main() {
  engine=$(getContainerEngine)

  if [[ -z "$engine" ]] ; then
    error "You must install Podman or Docker first"
    exit 1
  fi

  if [[ $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  check "$@"

  exit $?
}

# Run perfecto check
#
# *: Specs
#
# Code: Yes
# Echo: No
check() {
  local image tmp_dir args opts status

  image=$(getImage)
  tmp_dir=$(mktemp -d -t 'pfcnt-XXXXXXXXXXXXX')

  args=$(processArgs "$tmp_dir" "$@")

  if [[ -z "$CI" ]] ; then
    opts="-i -t -e CI=true"
  fi

  # shellcheck disable=SC2086
  $engine run --rm $opts -v "$tmp_dir:/perfecto" "$image" ${args}

  status=$?

  rm -rf "$tmp_dir"

  return $status
}

# Show usage info
#
# Code: Yes
# Echo: No
usage() {
  local image opts

  image=$(getImage)

  if [[ -z "$CI" ]] ; then
    opts="-i -t"
  fi

  # shellcheck disable=SC2086
  $engine run --rm $opts "$image" "--help"

  return $?
}

# Process arguments
#
# 1: Path to temporary directory (String)
# *: Specs
#
# Code: No
# Echo: Arguments (String)
processArgs() {
  local tmp_dir="$1"
  local arg spec_name result

  shift 1

  for arg in "$@" ; do
    if [[ ! -r "$arg" ]] ; then
      result="$result $arg"
      continue
    fi

    cp "$arg" "$tmp_dir/" &>/dev/null

    spec_name=$(basename "$arg")
    result="$result $spec_name"
  done

  echo "$result"
}

# Get container image name with perfecto
#
# Code: No
# Echo: Image name (String)
getImage() {
  if [[ -n "$IMAGE" ]] ; then
    if [[ ! $IMAGE =~ \/ ]] ; then
      echo "$IMAGE_BASE:$IMAGE"
      return
    fi
    
    echo "$IMAGE"
    return
  fi

  if [[ $(printenv "GITHUB_ACTIONS") == "true" ]] ; then
    echo "$IMAGE_MICRO"
    return
  fi

  if [[ $(printenv "CI") == "true" ]] ; then
    echo "$IMAGE_MICRO"
    return
  fi

  echo "$IMAGE_CENTOS"
}

# Get used container engine
#
# Code: No
# Echo: Engine name (String)
getContainerEngine() {
  if [[ -n "$ENGINE" ]] && hasApp "$ENGINE" ; then
    echo "$ENGINE"
    return
  fi

  if hasApp "docker" ; then
    echo "docker"
    return
  fi

  if hasApp "podman" ; then
    echo "podman"
    return
  fi
}

# Check if some app is installed
#
# 1: Binray name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  type "$1" &> /dev/null
  return $?
}

################################################################################

main "$@"
